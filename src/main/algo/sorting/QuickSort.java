package main.algo.sorting;

public class QuickSort {

    /* Алгоритм быстрой сортировки — это рекурсивный алгоритм.
     * Как уже было сказано выше quick sort использует стратегию «разделяй и властвуй».
     * Ее суть заключается в том, что задача разбивается на подзадачи до тех пор, пока не будет элементарной единицы.
     * Так и с алгоритмом: массив делится на несколько массивов, каждый из который сортируется
     * по отдельности и потом объединяется в один массив.
     * Пошаговое описание работы алгоритма быстрой сортировки:
     *  - Выбрать опорный элемент из массива. Обычно опорным элементом является средний элемент.
     *  - Разделить массив на два подмассива: элементы, меньше опорного и элементы, больше опорного.
     *  - Рекурсивно применить сортировку к двум подмассивам.
     * В результате таких действий рекурсии, программа дойдет до того, что массивы будут делиться
     * пока не будет один элемент, который потом и отсортируется.
     */

    public static void sort(int[] array, int low, int high) {
        //завершить выполнение, если длина массива равна 0
        if (array.length == 0) {
            return;
        }
        //завершить выполнение если уже нечего делить
        if (low >= high) {
            return;
        }
        // выбрать опорный элемент
        int middle = low + (high - low) / 2;
        int pivot = array[middle];

        // разделить на подмассивы, который больше и меньше опорного элемента
        int i = low, j = high;
        while (i <= j) {
            while (array[i] < pivot) {
                i++;
            }

            while (array[j] > pivot) {
                j--;
            }
            // меняем местами
            if (i <= j) {
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                i++;
                j--;
            }
        }

        // вызов рекурсии для сортировки левой и правой части
        if (low < j) {
            sort(array, low, j);
        }
        if (high > i) {
            sort(array, i, high);
        }
    }

}

